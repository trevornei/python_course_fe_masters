Lists have order 
Set are unordered.

List Comprehensions:
Start with what you are iterating over. [for name in names  ]
1. Then you can add a condition to the far left. [for name in names if name.startswith("A")]
2. Then you can add a transformation. [for name in names if name.startswith("A") print(name)]

10/16/24

Review: 
List comprehensions are a powerful tool because of their shortened syntax, you can make iterative loops, and the logic is easy to read.

Four different types of data types:
- Lists [] ordered
- Sets {1, 2, 3} unordered
- Tuples () 
- Dictionaries {} key value pairs, sytax: uses colons "key: value:"

Generators are efficient as your data structures grow...
- They are memory efficient because the don't create items all at once in memory.
    - They don't generate useless data.
    - Iterating over generators is faster than iterating over lists.

Slicing is a way to create sublists from LARGER lists.

Can combine two lists with the zip(list_one, list_two) function

Everything in python is an object!

OOP and Classes:
Classes are types of something.
Instance is and instance OF something. 

type(int(5))
>>> <class 'int'>

type(int)
>>> <class 'type'>


